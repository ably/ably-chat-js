---
description: Conventions for the React package
globs: src/react/**/*.tsx,src/react/**/*.ts
---
# React Conventions

## Custom Hooks

### Naming Conventions
- Use camelCase for hook names
- Prefix all hooks with `use` (e.g., `useMessages`, `useLogger`)
- Use descriptive names that reflect the hook's purpose

### Hook Documentation
- Use JSDoc style comments for hooks
- Include clear description of the hook's purpose
- Document all parameters and return values using `@param`, `@returns` and `@throws` etc
```typescript
/**
 * A hook that provides access to the Messages instance in the room.
 * @param params - Allows registering optional callbacks
 * @returns UseMessagesResponse - Object containing Messages instance
 */
```

### Hook Parameters

- Group related parameters into a single params object
- Use TypeScript interfaces to define parameter shapes

```typescript
export interface UseMessagesParams extends StatusParams, Listenable<MessageListener> {
  listener?: MessageListener;
}
```

### Hook Return Values

- Return objects with named properties for clarity
- Define return type interfaces explicitly
- Document each returned property

```typescript
export interface UseMessagesResponse extends ChatStatusResponse {
  readonly send: Messages['send'];
  readonly update: Messages['update'];
  // ... other properties
}
```

### Performance Optimization

- Memoize callbacks with `useCallback`
- Memoize expensive computations with `useMemo`
- Use refs for values that shouldn't trigger re-renders
```typescript
const listenerRef = useEventListenerRef(params?.listener);
```

### Cleanup and Resource Management

- Always clean up subscriptions and listeners
- Handle component unmounting gracefully
- Clear timers and intervals in cleanup functions